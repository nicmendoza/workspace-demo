{"version":3,"sources":["features/boardSlice.js","components/Canvas.js","components/Grid.js","components/MainContainer.js","App.js","reportWebVitals.js","app/store.js","index.js"],"names":["boardSlice","createSlice","name","initialState","notes","reducers","addNote","state","action","newNotes","payload","length","map","n","i","arr","id","concat","removeNote","splice","indexOf","setNotes","updateNote","note","slice","call","filter","Object","assign","actions","selectNotes","board","Canvas","useSelector","dispatch","useDispatch","ref","useRef","useState","height","setHeight","width","setWidth","offsetHeight","setOffsetHeight","offsetWidth","setOffsetWidth","inlineEditNote","setInlineEditNote","noteText","setNoteText","newNoteTexts","newNoteText","setNewNoteText","useEffect","handleResize","current","parentNode","clientHeight","clientWidth","rect","getBoundingClientRect","top","left","window","addEventListener","removeEventListener","handleDragEnd","event","currentTarget","attrs","x","y","applyNoteUpdate","text","clearNoteUpdate","undefined","className","onDblClick","evt","layerX","layerY","nextNoteText","cycleNewNoteText","onClick","align","fontSize","draggable","onDragEnd","bind","fill","shadowBlur","stroke","strokeWidth","cornerRadius","padding","wrap","onSubmit","defaultValue","onFocus","e","target","select","onChange","value","onKeyDown","key","autoFocus","style","paddingRight","lineHeight","background","borderRadius","borderColor","overflowWrap","boxShadow","overflow","resize","Grid","defaultColDef","flex","minWidth","editable","resizable","newValueHandler","colId","column","data","newValue","oldValue","props","immutableData","rowData","getRowNodeId","columnDefs","field","getContextMenuItems","params","node","deleteItem","newItem","file","aria-label","Main","App","MainContainer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","boardReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.957a1c09.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nexport const boardSlice = createSlice({\n  name: 'board',\n  initialState: {\n    notes: [],\n  },\n  reducers: {\n    addNote: (state, action) => {\n      // note mutation only allowed here because reduxjs/toolkit uses Immer under\n      // the hood to maintain immutability\n      const newNotes = (\n        action.payload.length ? action.payload : [action.payload]\n      )\n        .map((n,i,arr) => ({\n          id: state.notes.length + i,\n          ...n,\n        }))\n      state.notes = state.notes.concat(newNotes)\n    },\n    removeNote: (state, action) => {\n      state.notes.splice(state.notes.indexOf(action.payload))\n    },\n    setNotes: (state, action) => {\n      state.notes = action.payload\n    },\n    updateNote: (state, { payload }) => {\n      const note = [].slice.call(state.notes).filter(note=>note.id === payload.id)[0]\n      if (note) {\n        Object.assign(note, payload)\n      }\n    }\n  }\n})\n\nexport const { addNote, removeNote, setNotes, updateNote } = boardSlice.actions\n\nexport const selectNotes = state => state.board.notes\n\nexport default boardSlice.reducer","import React, { useState, useEffect, useRef} from 'react';\nimport { Stage, Layer, Group, Rect, Text } from 'react-konva';\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  addNote,\n  removeNote,\n  selectNotes,\n  updateNote\n} from '../features/boardSlice'\n\n\nfunction Canvas() {\n\n  const notes = useSelector(selectNotes)\n  const dispatch = useDispatch()\n\n  const ref = useRef(null)\n  const [height, setHeight] = useState(100)\n  const [width, setWidth] = useState(100)\n\n\n  const [offsetHeight, setOffsetHeight] = useState(0)\n  const [offsetWidth, setOffsetWidth] = useState(0)\n\n  const [inlineEditNote, setInlineEditNote] = useState(false)\n  const [noteText, setNoteText] = useState('')\n\n\n  // cycle through a series of \"new note texts\" for onboarding demo\n  const newNoteTexts = [\n    'Double click me on the canvas',\n    'Or double click me on the table view ðŸ‘ˆ',\n    'New Note'\n   ]\n\n  const [newNoteText, setNewNoteText] = useState(notes.length === 0 ? newNoteTexts[0] : newNoteTexts.slice(-1))\n\n  function cycleNewNoteText() {\n    const nextNoteText = newNoteTexts[newNoteTexts.indexOf(newNoteText) + 1]\n    if (nextNoteText) {\n      setNewNoteText(nextNoteText)\n    }\n  }\n\n  useEffect(() => {\n    // todo: handle resize\n    function handleResize() {\n      setHeight(ref.current.parentNode.clientHeight)\n      setWidth(ref.current.parentNode.clientWidth)\n      const rect = ref.current.getBoundingClientRect()\n      setOffsetHeight(rect.top)\n      setOffsetWidth(rect.left)\n    }\n\n    handleResize()\n\n    window.addEventListener('resize', handleResize)\n\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n    \n  }, [height, width])\n\n\n  const handleDragEnd = (note, event) => {\n    // push location changes back to store\n    const { x, y } = event.currentTarget.attrs\n    dispatch(updateNote({...note, x, y}))\n  };\n\n  function listenForEnterKeypress(e) {\n    switch(e.key){\n      case 'Enter':\n        applyNoteUpdate();\n        break;\n      case 'Escape':\n        clearNoteUpdate();\n        break;\n      default:\n        // do nothing\n    }\n  }\n\n  function applyNoteUpdate(){\n    dispatch(updateNote({...inlineEditNote, text: noteText}))\n    clearNoteUpdate();\n  }\n\n  function clearNoteUpdate(){\n    setInlineEditNote(undefined)\n    setNoteText('')\n  }\n\n  function stageHandleDblClick(event){\n    let {layerX: x, layerY: y} = event.evt\n    x -= 50\n    y -= 50\n    dispatch(addNote({x,y, text:newNoteText}))\n    cycleNewNoteText()\n  }\n\n  return (\n    <div ref={ref} className=\"background-grid\">\n      <Stage\n        width={width} height={height}\n      >\n        <Layer\n            onDblClick={stageHandleDblClick}\n            onClick={clearNoteUpdate}\n        >\n           <Rect\n            x={0} y={0} width={width} height={height}\n          />\n          {notes.length === 0 && (\n            <Text\n              x={0}\n              y={height/2 - 100}\n              width={width}\n              align=\"center\"\n              text=\"Double click anywhere to add a note\"\n              fontSize={50}\n\n            />\n          )}\n        </Layer>\n        <Layer>\n          {notes.map((note, i) => (\n            <Group\n              key={'note-' + i}\n              x={note.x}\n              y={note.y}\n              draggable\n              onDragEnd={handleDragEnd.bind(null, note)}\n              onDblClick={()=>setInlineEditNote(note)}\n            >\n              <Rect\n                width={100}\n                height={100}\n                fill=\"#ffeaa0\"\n                shadowBlur={2}\n                stroke=\"#9a8945\"\n                strokeWidth={1}\n                cornerRadius={[12, 0, 12, 0]}\n              />\n              <Text\n                text={note.text}\n                width={100}\n                fontSize={12}\n                align=\"left\"\n                padding={7}\n                wrap=\"word\"\n              />\n            </Group>\n          ))}\n        </Layer>\n      </Stage>\n      {inlineEditNote && (\n        <form onSubmit={applyNoteUpdate}>\n          <textarea\n            defaultValue={inlineEditNote.text}\n            onFocus={(e)=>e.target.select()}\n            onChange={(e)=>setNoteText(e.target.value)}\n            onKeyDown={listenForEnterKeypress}\n            className=\"absolute\"\n            autoFocus\n            style={{\n              top: inlineEditNote.y + offsetHeight,\n              left: inlineEditNote.x + offsetWidth,\n              padding: '7px',\n              paddingRight: '5px',\n              fontSize: '11.5px',\n              lineHeight: '12px',\n              width: '100px',\n              height: '100px',\n              background: '#ffeaa0',\n              borderRadius: '12px 0 12px 0',\n              borderColor: '#9a8945',\n              overflowWrap: 'break-word',\n              boxShadow: '0 3px 7px black',\n              overflow: 'hidden',\n              resize: 'none'\n            }}\n          ></textarea>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default Canvas\n\n","import React, { useState, useEffect, useRef} from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport { useSelector, useDispatch } from 'react-redux'\nimport {\n  addNote,\n  removeNote,\n  selectNotes,\n  setNotes,\n  updateNote,\n} from '../features/boardSlice'\n\n\nfunction Grid() {\n\n  const notes = useSelector(selectNotes)\n  const dispatch = useDispatch()\n  //dispatch(setNotes(someNotes))\n\n  const [gridApi, setGridApi] = useState(null);\n  const [gridColumnApi, setGridColumnApi] = useState(null);\n\n  const columnDefs = [{\n    field: 'text',\n  },{\n    field: 'x',\n    editable: false\n  },{\n    field: 'y',\n    editable: false\n  }]\n  const defaultColDef = {\n    flex: 1,\n    minWidth: 130,\n    editable: true,\n    resizable: true,\n    newValueHandler: ({column: {colId}, data: {id}, oldValue, newValue}) => {\n      const props = {}\n      props[colId] = newValue\n      dispatch(\n        updateNote({id, ...props})\n      )\n      return true\n    }\n  }\n\n  function getContextMenuItems(params){\n    if (!params.node) return [];\n    let id = params.node.data.id\n\n    let deleteItem = {\n        name: \"Delete\",\n        action: () => removeNote(id)\n    };\n\n    let newItem = {\n        name: \"New\",\n        action: () => addNote({x: 10, y: 10, text: 'whatevs'})\n    };\n\n    return params.node.data.file ? [deleteItem] : [newItem, deleteItem];\n};\n\n  return (\n    <div>\n      { notes.length ? (\n        <div className=\"ag-theme-alpine\" style={{ height: 400, width: 600 }}>\n          <AgGridReact\n            immutableData={true}\n            rowData={notes}\n            getRowNodeId={data => data.id}\n            columnDefs={columnDefs}\n            defaultColDef={defaultColDef}\n            getContextMenuItems={getContextMenuItems}\n          >\n          </AgGridReact>\n        </div>\n      ) : null}\n      <button\n        className=\"bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white my-2 ml-2 py-2 px-4 border border-blue-500 hover:border-transparent rounded\"\n        aria-label=\"Add Note\"\n        onClick={() => dispatch(addNote({ id: notes.length, x: 20, y: 20, text: \"Double click me to edit\" }))}\n      >\n        + Add Note...\n      </button>\n    </div>\n  );\n}\nexport default Grid\n\n","import Nav from './Nav'\nimport Canvas from './Canvas'\nimport Grid from './Grid'\nfunction Main() {\n  return (\n    <div className=\"h-screen\">\n     {/* <Nav className=\"h-100\"/>*/}\n      {/*<header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto py-6 px-0\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Project ABC Board\n          </h1>\n        </div>\n      </header>*/}\n      <main className=\"h-full\">\n        <div className=\"flex h-full\">\n          <div className=\"w-1/4 overflow-x-scroll\">\n            <Grid />\n          </div>\n          <div className=\"w-3/4 h-full border border-solid border-gray-300  \">\n            <Canvas />\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default Main","import './App.css';\nimport MainContainer from './components/MainContainer'\n\nfunction App() {\n  return (\n    <MainContainer />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport boardReducer from '../features/boardSlice'\n\nexport default configureStore({\n  reducer: {\n    board: boardReducer\n  }\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux'\nimport store from './app/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}